;;; majapahit-theme.el --- majapahit for Emacs.

;; Copyright (C) 2015-2016 Alexander F. Adhyatma

;; Author: Alexander F. Adhyatma
;; URL: http:/gitlab.com/franksn/majapahit-theme/
;; Version: 1.0.0
;;
;; This file is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:
;;
;; A colorscheme for emacs with light and dark variant of it.
;;
;;; Installation:
;;
;;   M-x package-install -> majapahit-theme
;;
;;   (load-theme 'majapahit-dark t)
;;     or
;;   (load-theme 'majapahit-light t)
;;
;;; Bugs
;;
;; report any bugs to franksn@openmailbox.org
;;
;;; Code:

(defgroup majapahit-theme nil
  "majapahit-theme options."
  :group 'faces)

(defcustom majapahit-theme-variable-pitch t
  "Use variable pitch for like latex markdown or org-mode"
  :type 'boolean
  :group 'majapahit-theme)

(defcustom majapahit-theme-bg1 t
  "Use a background for comment lines."
  :type 'boolean
  :group 'majapahit-theme)

(defcustom majapahit-theme-org-height t
  "Use varying text heights for org headings."
  :type 'boolean
  :group 'majapahit-theme)

(defcustom majapahit-theme-tex-height-90 0.9
  "Font size 90%"
  :type 'number
  :group 'majapahit-theme)

(defcustom majapahit-theme-tex-height-110 1.1
  "Font size 110%"
  :type 'number
  :group 'majapahit-theme)

(defcustom majapahit-theme-tex-height-120 1.2
  "Font size 120%"
  :type 'number
  :group 'majapahit-theme)

(defcustom majapahit-theme-tex-height-130 1.3
  "Font size 130%"
  :type 'number
  :group 'majapahit-theme)

(defun create-majapahit-theme (variant theme-name)
  (let ((class '((class color) (min-colors 257))) ;;
        ;;                                        DARK      LIGHT
        (base          (if (eq variant 'dark)   "#BAB2A9" "#50484e" ))
        (base2         (if (eq variant 'dark)   "#5D5147" "#ADA190" ))
        (base3         (if (eq variant 'dark)   "#B8BAB2" "#5FAF87" ))
        (cursor        (if (eq variant 'dark)   "#917154" "#806C5B" ))
        (bg1           (if (eq variant 'dark)   "#242424" "#FFFCF1" ))
        (bg2           (if (eq variant 'dark)   "#303030" "#F1EBDD" ))
        (bg3           (if (eq variant 'dark)   "#3A3A3A" "#EBE7D9" ))
        (bg4           (if (eq variant 'dark)   "#6F6F6F" "#9D998C" ))
        (key1          (if (eq variant 'dark)   "#D66F84" "#A33555" ))
        (key2          (if (eq variant 'dark)   "#D4B292" "#616960" ))
        (builtin       (if (eq variant 'dark)   "#9C8772" "#857358" ))
        (keyword       (if (eq variant 'dark)   "#D75F87" "#CF5980" ))
        (const         (if (eq variant 'dark)   "#D49A8A" "#666E4D" ))
        (comment       (if (eq variant 'dark)   "#707070" "#979987" ))
        (func          (if (eq variant 'dark)   "#D79887" "#BF5637" ))
        (str           (if (eq variant 'dark)   "#9DA69E" "#6F756E" ))
        (type          (if (eq variant 'dark)   "#94B1A3" "#3A6E64" ))
        (comp          (if (eq variant 'dark)   "#E47386" "#DB4764" ))
        (var           (if (eq variant 'dark)   "#8EA8A2" "#759494" ))
        (err           (if (eq variant 'dark)   "#8E6A60" "#F1847B" ))
        (war           (if (eq variant 'dark)   "#E78F7C" "#CE7244" ))
        (inf           (if (eq variant 'dark)   "#769188" "#649888" ))
        (interop       (if (eq variant 'dark)   "#7D6F6A" "#848F86" ))
        (suc           (if (eq variant 'dark)   "#BDC79E" "#899C5a" ))
        (green         (if (eq variant 'dark)   "#B9C398" "#6D784D" ))
        (yellow        (if (eq variant 'dark)   "#CC816B" "#CE6A38" ))
        (cyan          (if (eq variant 'dark)   "#989584" "#687366" ))
        (violet        (if (eq variant 'dark)   "#A8938C" "#665843" ))
        (red           (if (eq variant 'dark)   "#C5617A" "#CE6D6D" ))
        (inactive      (if (eq variant 'dark)   "#756456" "#D4D1C7" ))
        (m-line-brdr   (if (eq variant 'dark)   "#939080" "#CAE8E8" ))
        (org-block-bg  (if (eq variant 'dark)   "#282828" "#D9E6DD" ))
        (org-h1-bg     (if (eq variant 'dark)   "#3A3A3A" "#FAFAD9" ))
        (org-h2-bg     (if (eq variant 'dark)   "#3C3C3C" "#F5F5D5" ))
        (org-h3-bg     (if (eq variant 'dark)   "#3F3F3F" "#EDEDCE" ))
        (org-h4-bg     (if (eq variant 'dark)   "#242424" "#E6E6CF" ))
        (highlight     (if (eq variant 'dark)   "#1C1C1C" "#DBD9CF" ))
        (green-bg      (if (eq variant 'dark)   "#7B894f" "#D5E2CD" ))
        (blue-bg       (if (eq variant 'dark)   "#5E756C" "#5E756C" ))
        (red-bg        (if (eq variant 'dark)   "#512e31" "#E3C8CC" ))
        (mkwd          (if (eq variant 'dark)   "#E3A598" "#A3604D" ))
        (pth1          (if (eq variant 'dark)   "#DED9C1" "#7D7F71" ))
        (pth2          (if (eq variant 'dark)   "#FAC987" "#A46C7F" ))
        (pth3          (if (eq variant 'dark)   "#ACBDB5" "#2B777B" ))
        (pth4          (if (eq variant 'dark)   "#A1E8A1" "#54916D" ))
        (pth5          (if (eq variant 'dark)   "#C3698A" "#C75072" ))
        (pth6          (if (eq variant 'dark)   "#5C737c" "#547580" ))
        (pth7          (if (eq variant 'dark)   "#A8938C" "#927C5E" ))
        (pth8          (if (eq variant 'dark)   "#898779" "#478CDB" ))

        (t-class '((class color) (min-colors 89)))
        ;;                                         DARK      LIGHT
        (t-base          (if (eq variant 'dark)   "#BCBCBC" "#444444" ))
        (t-base2         (if (eq variant 'dark)   "#5F5F5F" "#AFAF87" ))
        (t-base3         (if (eq variant 'dark)   "#A8A8A8" "#5F5F87" ))
        (t-cursor        (if (eq variant 'dark)   "#AF875F" "#875F5F" ))
        (t-bg1           (if (eq variant 'dark)   "#242424" "#FFFFFF" ))
        (t-bg2           (if (eq variant 'dark)   "#303030" "#EEEEEE" ))
        (t-bg3           (if (eq variant 'dark)   "#3A3A3A" "#DADADA" ))
        (t-bg4           (if (eq variant 'dark)   "#7C7C7C" "#AFAF87" ))
        (t-key1          (if (eq variant 'dark)   "#D75F87" "#AF5F5F" ))
        (t-key2          (if (eq variant 'dark)   "#D7AF87" "#87875F" ))
        (t-builtin       (if (eq variant 'dark)   "#AF875F" "#878787" ))
        (t-keyword       (if (eq variant 'dark)   "#D75F87" "#D75F87" ))
        (t-const         (if (eq variant 'dark)   "#AFAFAF" "#D7875F" ))
        (t-comment       (if (eq variant 'dark)   "#707070" "#878787" ))
        (t-func          (if (eq variant 'dark)   "#D7875F" "#AFAF87" ))
        (t-str           (if (eq variant 'dark)   "#AFAF87" "#875F5F" ))
        (t-type          (if (eq variant 'dark)   "#87AFAF" "#5F5F87" ))
        (t-comp          (if (eq variant 'dark)   "#D78787" "#D75F5F" ))
        (t-var           (if (eq variant 'dark)   "#878787" "#AF8787" ))
        (t-err           (if (eq variant 'dark)   "#FF5F87" "#FF8787" ))
        (t-war           (if (eq variant 'dark)   "#D7875F" "#AF875F" ))
        (t-inf           (if (eq variant 'dark)   "#5f8787" "#87AFAF" ))
        (t-interop       (if (eq variant 'dark)   "#D7AF87" "#878787" ))
        (t-suc           (if (eq variant 'dark)   "#AFD787" "#87AF87" ))
        (t-green         (if (eq variant 'dark)   "#AFD787" "#87875F" ))
        (t-yellow        (if (eq variant 'dark)   "#D7875F" "#D7875F" ))
        (t-cyan          (if (eq variant 'dark)   "#AF8700" "#6F875F" ))
        (t-violet        (if (eq variant 'dark)   "#878787" "#5F5F5F" ))
        (t-red           (if (eq variant 'dark)   "#FF8787" "#D78787" ))
        (t-inactive      (if (eq variant 'dark)   "#878787" "#D7D7AF" ))
        (t-m-line-brdr   (if (eq variant 'dark)   "#AFAFAF" "#d7d7d7" ))
        (t-org-block-bg  (if (eq variant 'dark)   "#282828" "#D7D7D7" ))
        (t-org-h1-bg     (if (eq variant 'dark)   "#303030" "#FFFFD7" ))
        (t-org-h2-bg     (if (eq variant 'dark)   "#3A3A3A" "#FFFFD7" ))
        (t-org-h3-bg     (if (eq variant 'dark)   "#3c3c3c" "#FFFFD7" ))
        (t-org-h4-bg     (if (eq variant 'dark)   "#444444" "#FFFFD7" ))
        (t-highlight     (if (eq variant 'dark)   "#1C1C1C" "#D0D0D0" ))
        (t-green-bg      (if (eq variant 'dark)   "#87875F" "#D7D7AF" ))
        (t-blue-bg       (if (eq variant 'dark)   "#5FAFAF" "#5FAFAF" ))
        (t-red-bg        (if (eq variant 'dark)   "#5F005F" "#FF875F" ))
        (t-mkwd          (if (eq variant 'dark)   "#D7AF87" "#AF5F87" ))
        (t-pth1          (if (eq variant 'dark)   "#D7875F" "#87875f" ))
        (t-pth2          (if (eq variant 'dark)   "#FFAF87" "#AF5F87" ))
        (t-pth3          (if (eq variant 'dark)   "#D7D7D7" "#008787" ))
        (t-pth4          (if (eq variant 'dark)   "#AFD7AF" "#5F875F" ))
        (t-pth5          (if (eq variant 'dark)   "#FF875F" "#D7AF5F" ))
        (t-pth6          (if (eq variant 'dark)   "#5F8787" "#5F8787" ))
        (t-pth7          (if (eq variant 'dark)   "#AF875F" "#AFFFD7" ))
        (t-pth8          (if (eq variant 'dark)   "#878787" "#5F87D7" ))

        ;; for variable pitch
        (mjp-variable-pitch (if majapahit-theme-variable-pitch 'variable-pitch 'default))
        )

    (custom-theme-set-faces
     theme-name

;;;;; basics
     `(cursor                                          ((,class (:background ,cursor :inverse-video t))
                                                        (,t-class (:background ,t-cursor :inverse-video t))))
     `(default                                         ((,class (:background ,bg1 :foreground ,base))
                                                        (,t-class (:background ,t-bg1 :foreground ,t-base))))
     `(default-italic                                  ((,class (:italic t))
                                                        (,t-class (:italic t))))
     `(error                                           ((,class (:foreground ,err))
                                                        (,t-class (:foreground ,t-err))))
     `(eval-sexp-fu-flash                              ((,class (:foreground ,bg4 :background ,org-block-bg))
                                                        (,t-class (:foreground ,t-bg4 :background ,t-org-block-bg))))
     `(eval-sexp-fu-flash-error                        ((,class (:foreground ,base :background ,red-bg))
                                                        (,t-class (:foreground ,t-base :background ,t-red-bg))))

;;;;; font-locks

     `(font-lock-builtin-face                          ((,class (:foreground ,builtin))
                                                        (,t-class (:foreground ,t-builtin))))
     `(font-lock-comment-face                          ((,class (:foreground ,comment :background ,(when majapahit-theme-bg1 bg1) :slant italic))
                                                        (,t-class (:foreground ,t-comment :background ,(when majapahit-theme-bg1 bg1) :slant italic))))
     `(font-lock-constant-face                         ((,class (:foreground ,const))
                                                        (,t-class (:foreground ,t-const))))
     `(font-lock-doc-face                              ((,class (:foreground ,comment))
                                                        (,t-class (:foreground ,comment))))
     `(font-lock-doc-string-face                       ((,class (:foreground ,comment))
                                                        (,t-class (:foreground ,t-comment))))
     `(font-lock-function-name-face                    ((,class (:foreground ,func))
                                                        (,t-class (:foreground ,t-func))))
     `(font-lock-keyword-face                          ((,class (:foreground ,keyword))
                                                        (,t-class (:foreground ,t-keyword))))
     `(font-lock-negation-char-face                    ((,class (:foreground ,bg4))
                                                        (,t-class (:foreground ,t-bg4))))
     `(font-lock-preprocessor-face                     ((,class (:foreground ,cyan))
                                                        (,t-class (:foreground ,t-cyan))))
     `(font-lock-reference-face                        ((,class (:foreground ,violet))
                                                        (,t-class (:foreground ,t-violet))))
     `(font-lock-string-face                           ((,class (:foreground ,str))
                                                        (,t-class (:foreground ,t-str))))
     `(font-lock-type-face                             ((,class (:foreground ,type :italic t))
                                                        (,t-class (:foreground ,t-type :italic t))))
     `(font-lock-variable-name-face                    ((,class (:foreground ,var))
                                                        (,t-class (:foreground ,t-var))))
     `(font-lock-warning-face                          ((,class (:foreground ,war :background ,bg1))
                                                        (,t-class (:foreground ,t-war :background ,t-bg1))))

;;;;; extra font-locks
     `(clojure-keyword-face                            ((,class (:foreground ,green :underline t ))
                                                        (,t-class (:foreground ,t-green :underline t ))))
     `(clojure-interop-method-face                     ((,class (:foreground ,interop))
                                                        (,t-class (:foreground ,t-interop))))
     `(elixir-atom-face                                ((,class (:foreground ,mkwd :weight bold))
                                                        (,t-class (:foreground ,t-mkwd :weight bold))))
     `(c-annotation-face                               ((,class (:inherit ,font-lock-constant-face))
                                                        (,t-class (:inherit ,font-lock-constant-face))))
     `(css-selector                                    ((,class (:inherit ,font-lock-keyword-face))
                                                        (,t-class (:inherit ,font-lock-keyword-face))))
     `(css-property                                    ((,class (:inherit ,font-lock-string-face))
                                                        (,t-class (:inherit ,font-lock-string-face))))
     `(sh-heredoc                                      ((,class (:inherit ,font-lock-doc-face))
                                                        (,t-class (:inherit font-lock-doc-face))))
     `(sh-quoted-exec                                  ((,class (:inherit ,font-lock-function-name-face))
                                                        (,t-class (:inherit ,font-lock-function-name-face))))

;;;;; basic stuffs
     `(fringe                                          ((,class (:background ,bg1 :foreground ,base))
                                                        (,t-class (:background ,t-bg1 :foreground ,t-base))))
     `(hl-line                                         ((,class (:background ,(if (eq variant 'dark) bg2 bg2)))
                                                        (,t-class (:background ,(if (eq variant 'dark) bg2 t-bg2)))))
     `(link                                            ((,class (:foreground ,inf :underline t))
                                                        (,t-class (:foreground ,t-inf :underline t))))
     `(link-visited                                    ((,class (:foreground ,keyword :underline t))
                                                        (,t-class (:foreground ,t-keyword :underline t))))
     `(minibuffer-prompt                               ((,class (:bold t :foreground ,inf))
                                                        (,t-class (:bold t :foreground ,t-inf))))
     `(page-break-lines                                ((,class (:foreground ,bg2))
                                                        (,t-class (:foreground ,t-bg2))))
     `(popup-tip-face                                  ((,class (:background ,bg2 :foreground ,base :bold nil :italic nil :underline nil))
                                                        (,t-class (:background ,t-bg2 :foreground ,t-base :bold nil :italic nil :underline nil))))
     `(region                                          ((,class (:background ,highlight))
                                                        (,t-class (:background ,t-highlight))))
     `(secondary-selection                             ((,class (:background ,bg3))
                                                        (,t-class (:background ,t-bg3))))
     `(tooltip                                         ((,class (:background ,bg2 :foreground ,base :bold nil :italic nil :underline nil))
                                                        (,t-class (:background ,t-bg2 :foreground ,t-base :bold nil :italic nil :underline nil))))
     `(vertical-border                                 ((,class (:foreground ,bg4))
                                                        (,t-class (:foreground ,t-bg4))))
     `(warning                                         ((,class (:foreground ,war ))
                                                        (,t-class (:foreground ,t-war))))

;;;;; anzu-mode
     `(anzu-mode-line                                  ((,class (:foreground ,yellow :weight bold))
                                                        (,t-class (:foreground ,t-yellow :weight bold))))

;;;;; auctex / latex-mode
     `(font-latex-bold-face                            ((,class (:foreground ,comp))
                                                        (,t-class (:foreground ,t-comp))))
     `(font-latex-italic-face                          ((,class (:foreground ,key2 :italic t))
                                                        (,t-class (:foreground ,t-key2 :italic t))))
     `(font-latex-match-reference-keywords             ((,class (:foreground ,const))
                                                        (,t-class (:foreground ,t-const))))
     `(font-latex-match-variable-keywords              ((,class (:foreground ,var))
                                                        (,t-class (:foreground ,t-var))))
     `(font-latex-math-face                            ((,class (:foreground ,builtin :weight bold))
                                                        (,t-class (:foreground ,t-builtin :weight bold))))
     `(font-latex-sectioning-0-face                    ((,class (:inherit font-latex-sectioning-1-face
                                                                          :height ,majapahit-theme-tex-height-110))
                                                        (,t-class (:inherit font-latex-sectioning-1-face
                                                                            :height ,majapahit-theme-tex-height-110))))
     `(font-latex-sectioning-1-face                    ((,class (:inherit font-latex-sectioning-2-face
                                                                          :height ,majapahit-theme-tex-height-110))
                                                        (,t-class (:inherit font-latex-sectioning-2-face
                                                                            :height ,majapahit-theme-tex-height-110))))
     `(font-latex-sectioning-2-face                    ((,class (:inherit font-latex-sectioning-3-face
                                                                          :height ,majapahit-theme-tex-height-110))
                                                        (,t-class (:inherit font-latex-sectioning-3-face
                                                                            :height ,majapahit-theme-tex-height-110))))
     `(font-latex-sectioning-3-face                    ((,class (:inherit font-latex-sectioning-4-face
                                                                          :height ,majapahit-theme-tex-height-110))
                                                        (,t-class (:inherit font-latex-sectioning-4-face
                                                                            :height ,majapahit-theme-tex-height-110))))
     `(font-latex-sectioning-4-face                    ((,class (:inherit font-latex-sectioning-5-face
                                                                          :height ,majapahit-theme-tex-height-110))
                                                        (,t-class (:inherit font-latex-sectioning-5-face
                                                                            :height ,majapahit-theme-tex-height-110))))
     `(font-latex-sectioning-5-face                    ((,class (:inherit ,mjp-variable-pitch :foreground ,violet
                                                                          :weight bold))
                                                        (,t-class (:inherit ,mjp-variable-pitch :foreground ,t-violet
                                                                            :weight bold))))
     `(font-latex-sedate-face                          ((,class (:foreground ,bg4))
                                                        (,t-class (:foreground ,t-bg4))))
     `(font-latex-slide-title-face                     ((,class (:inherit (,mjp-variable-pitch font-lock-type-face)
                                                                          :weight bold :height ,majapahit-theme-tex-height-130))
                                                        (,t-class (:inherit (,mjp-variable-pitch font-lock-type-face)
                                                                            :weight bold :height ,majapahit-theme-tex-height-110))))
     `(font-latex-string-face                          ((,class (:foreground ,str))
                                                        (,t-class (:foreground ,t-str))))
     `(font-latex-subscript-face                       ((,class (:height ,majapahit-theme-tex-height-90))
                                                        (,t-class (:height ,majapahit-theme-tex-height-90))))
     `(font-latex-superscript-face                     ((,class (:height ,majapahit-theme-tex-height-90))
                                                        (,t-class (:height ,majapahit-theme-tex-height-90))))
     `(font-latex-warning-face                         ((,class (:inherit bold :foreground ,war :underline t))
                                                        (,t-class (:inherit bold :foreground ,t-war :underline t))))

     ;; Avy
     `(avy-lead-face-0                                 ((,class (:foreground ,inf))
                                                        (,t-class (:foreground ,t-inf))))
     `(avy-lead-face-1                                 ((,class (:foreground ,cyan))
                                                        (,t-class (:foreground ,t-cyan))))
     `(avy-lead-face-2                                 ((,class (:foreground ,red))
                                                        (,t-class (:foreground ,t-red))))
     `(avy-lead-face                                   ((,class (:foreground ,yellow))
                                                        (,t-class (:foreground ,t-yellow))))
     `(avy-background-face                             ((,class (:foreground ,bg2))
                                                        (,t-class (:foreground ,t-bg2))))
     `(avy-goto-char-timer-face                        ((,class (:inherit    highlight))
                                                        (,t-class (:inherit    highlight))))
     ;;Clojure-test-mode
     `(clojure-test-failure-face                       ((,class (:foreground ,yellow :weight bold :underline t))
                                                        (,t-class (:foreground ,t-yellow :weight bold :underline t))))
     `(clojure-test-error-face                         ((,class (:foreground ,key1 :weight bold :underline t))
                                                        (,t-class (:foreground ,t-key1 :weight bold :underline t))))
     `(clojure-test-success-face                       ((,class (:foreground ,green :weight bold :underline t))
                                                        (,t-class (:foreground ,t-green :weight bold :underline t))))

     ;; Cider-repl-mode
     `(cider-repl-err-output-face                      ((,class (:inherit ,font-lock-warning-face :underline nil))
                                                        (,t-class (:inherit ,font-lock-warning-face :underline nil))))

     ;; cider-test-mode
     `(cider-test-failure-face                         ((,class (:foreground ,war :weight bold :underline t))
                                                        (,t-class (:foreground ,war :weight bold :underline t))))
     `(cider-test-error-face                           ((,class (:foreground ,err :weight bold :underline t))
                                                        (,t-class (:foreground ,t-err :weight bold :underline t))))
     `(cider-test-success-face                         ((,class (:foreground ,suc :weight bold :underline t))
                                                        (,t-class (:foreground ,t-suc :weight bold :underline t))))

     ;; circe
     `(circe-prompt-face                               ((,class (:foreground ,keyword :weight bold :background nil))
                                                        (,t-class (:foreground ,t-keyword :weight bold :background nil))))
     `(circe-server-face                               ((,class (:foreground ,bg4))
                                                        (,t-class (:foreground ,t-bg4))))
     `(circe-highlight-nick-face                       ((,class (:foreground ,suc))
                                                        (,t-class (:foreground ,t-suc))))
     `(circe-topic-diff-new-face                       ((,class (:background ,green-bg :foreground ,base3))
                                                        (,t-class (:background ,t-green-bg :foreground ,t-base3))))
     `(circe-topic-diff-removed-face                   ((,class (:background ,red-bg :foreground ,base))
                                                        (,t-class (:background ,t-red-bg :foreground ,t-base))))
     `(circe-fool-face                                 ((,class (:foreground ,base2))
                                                        (,t-class (:foreground ,t-base2))))

     ;; Company Mode
     `(company-echo                                    ((,class (:inherit company-echo-common))
                                                        (,t-class (:inherit company-echo-common))))
     `(company-echo-common                             ((,class (:foreground ,keyword :background nil))
                                                        (,t-class (:foreground ,t-keyword :background nil))))
     `(company-preview-common                          ((,class (:underline t :foreground ,base :background ,bg2))
                                                        (,t-class (:underline t :foreground ,t-base :background ,t-bg2))))
     `(company-preview                                 ((,class (:inherit company-preview-common))
                                                        (,t-class (:inherit company-preview-common))))
     `(company-preview-search                          ((,class (:foreground ,keyword))
                                                        (,t-class (:foreground ,t-keyword))))
     `(company-template-field                          ((,class (:foreground ,inf :background nil :underline ,bg3))
                                                        (,t-class (:foreground ,t-inf :background nil :underline ,t-bg3))))
     `(company-scrollbar-fg                            ((,class (:foreground nil :background ,bg2))
                                                        (,t-class (:foreground nil :background ,t-bg2))))
     `(company-scrollbar-bg                            ((,class (:foreground nil :background ,bg3))
                                                        (,t-class (:foreground nil :background ,t-bg3))))
     `(company-preview-common                          ((,class (:inherit font-lock-comment-face))
                                                        (,t-class (:inherit font-lock-comment-face))))
     `(company-tooltip                                 ((,class (:foreground ,base3 :background ,bg2))
                                                        (,t-class (:foreground ,t-base3 :background ,t-bg2))))
     `(company-tooltip-common                          ((,class (:foreground ,base ))
                                                        (,t-class (:foreground ,t-base ))))
     `(company-tooltip-annotation                      ((,class (:foreground ,bg4))
                                                        (,t-class (:foreground ,t-bg4))))
     `(company-tooltip-annotation-selection            ((,class (:foreground ,base2 :background ,keyword))
                                                        (,t-class (:foreground ,t-base2 :background ,t-keyword))))
     `(company-tooltip-common-selection                ((,class (:foreground ,base :background ,keyword))
                                                        (,t-class (:foreground ,t-base :background ,keyword))))
     `(company-tooltip-mouse                           ((,class (:foreground ,bg1 :background ,red-bg))
                                                        (,t-class (:foreground ,t-bg1 :background ,t-red-bg))))
     `(company-tooltip-selection                       ((,class (:foreground ,base :background ,keyword))
                                                        (,t-class (:foreground ,t-base :background ,t-keyword))))

     ;; Diffs
     `(diff-changed                              ((,class (:foreground ,base3 :background nil))
                                                  (,t-class (:foreground ,t-base3 :background nil))))
     `(diff-added                                ((,class (:foreground ,base :background ,green-bg))
                                                  (,t-class (:foreground ,t-base :background ,t-green-bg))))
     `(diff-removed                              ((,class (:foreground ,base :background ,red-bg))
                                                  (,t-class (:foreground ,t-base :background ,t-red-bg))))
     `(diff-indicator-changed                    ((,class (:inherit diff-changed))
                                                  (,t-class (:inherit diff-changed))))
     `(diff-indicator-added                      ((,class (:inherit diff-added))
                                                  (,t-class (:inherit diff-added))))
     `(diff-indicator-removed                    ((,class (:inherit diff-removed))
                                                  (,t-class (:inherit diff-removed))))

     ;; Diff-hl
     `(diff-hl-change                            ((,class (:inherit diff-changed))
                                                  (,t-class (:inherit diff-changed))))
     `(diff-hl-delete                            ((,class (:inherit diff-removed))
                                                  (,t-class (:inherit diff-removed))))
     `(diff-hl-insert                            ((,class (:inherit diff-added))
                                                  (,t-class (:inherit diff-added))))
     `(diff-hl-unknown                           ((,class (:foreground ,cyan))
                                                  (,t-class (:foreground ,t-cyan))))

     ;; Dired
     `(dired-directory                           ((,class (:foreground ,type :weight bold))
                                                  (,t-class (:foreground ,t-type :weight bold))))
     `(dired-flagged                             ((,class (:foreground ,red))
                                                  (,t-class (:foreground ,t-red))))
     `(dired-header                              ((,class (:foreground ,comp :weight bold))
                                                  (,t-class (:foreground ,t-comp :weight bold))))
     `(dired-ignored                             ((,class (:inherit font-lock-comment-face))
                                                  (,t-class (:inherit font-lock-comment-face))))
     `(dired-mark                                ((,class (:foreground ,comp :weight bold))
                                                  (,t-class (:foreground ,comp :weight bold))))
     `(dired-marked                              ((,class (:foreground ,cyan :weight bold))
                                                  (,t-class (:foreground ,t-cyan :weight bold))))
     `(dired-perm-write                          ((,class (:foreground ,violet :underline t))
                                                  (,t-class (:foreground ,t-violet :underline t))))
     `(dired-symlink                             ((,class (:foreground ,bg4 :weight bold))
                                                  (,t-class (:foreground ,t-bg4 :weight bold))))
     `(dired-warning                             ((,class (:foreground ,yellow :weight bold))
                                                  (,t-class (:foreground ,t-yellow :weight bold))))
     ;; Elfeed
     `(elfeed-search-date-face                   ((,class (:foreground ,bg4))
                                                  (,t-class (:foreground ,t-bg4))))
     `(elfeed-search-feed-face                   ((,class (:foreground ,base2))
                                                  (,t-class (:foreground ,t-base2))))
     `(elfeed-search-tag-face                    ((,class (:foreground ,base3))
                                                  (,t-class (:foreground ,t-base3))))
     `(elfeed-search-title-face                  ((,class (:foreground ,base))
                                                  (,t-class (:foreground ,t-base))))
;;;;; ediff
     `(ediff-current-diff-A                      ((,class(:background ,org-h1-bg :foreground ,inf))
                                                  (,t-class (:background ,t-org-h1-bg :foreground ,t-inf))))
     `(ediff-current-diff-Ancestor               ((,class(:background ,org-h2-bg :foreground ,str))
                                                  (,t-class (:background ,t-org-h2-bg :foreground ,t-str))))
     `(ediff-current-diff-B                      ((,class(:background ,org-h4-bg :foreground ,yellow))
                                                  (,t-class (:background ,t-org-h4-bg :foreground ,t-yellow))))
     `(ediff-current-diff-C                      ((,class(:background ,org-h3-bg :foreground ,green))
                                                  (,t-class (:background ,t-org-h3-bg :foreground ,t-green))))
     `(ediff-even-diff-A                         ((,class(:background ,bg3))
                                                  (,t-class (:background ,t-bg3))))
     `(ediff-even-diff-Ancestor                  ((,class(:background ,bg2))
                                                  (,t-class (:background ,t-bg2))))
     `(ediff-even-diff-B                         ((,class(:background ,bg3))
                                                  (,t-class (:background ,t-bg3))))
     `(ediff-even-diff-C                         ((,class(:background ,bg3))
                                                  (,t-class (:background ,t-bg3))))
     `(ediff-fine-diff-A                         ((,class(:background nil :bold t :underline t))
                                                  (,t-class (:background nil :bold t :underline t))))
     `(ediff-fine-diff-Ancestor                  ((,class(:background nil :bold t :underline t))
                                                  (,t-class (:background nil :bold t :underline t))))
     `(ediff-fine-diff-B                         ((,class(:background nil :bold t :underline t))
                                                  (,t-class (:background nil :bold t :underline t))))
     `(ediff-fine-diff-C                         ((,class(:background nil :bold t :underline t))
                                                  (,t-class (:background nil :bold t :underline t))))
     `(ediff-odd-diff-A                          ((,class(:background ,(if (eq variant 'dark) bg3 bg4)))
                                                  (,t-class (:background ,(if (eq variant 'dark) t-bg3 t-bg4)))))
     `(ediff-odd-diff-Ancestor                   ((,class(:background ,(if (eq variant 'dark) bg2 bg4)))
                                                  (,t-class (:background ,(if (eq variant 'dark) t-bg2 t-bg4)))))
     `(ediff-odd-diff-B                          ((,class(:background ,bg4))
                                                  (,t-class (:background ,t-bg4))))
     `(ediff-odd-diff-C                          ((,class(:background ,bg4))
                                                  (,t-class (:background ,t-bg4))))

;;;;; ein
     `(ein:cell-input-area                       ((,class (:background ,bg2))
                                                  (,t-class (:background ,t-bg2))))
     `(ein:cell-input-prompt                     ((,class (:foreground ,(if (eq variant 'dark) suc green)))
                                                  (,t-class (:foreground ,(if (eq variant 'dark) t-suc t-green)))))
     `(ein:cell-output-prompt                    ((,class (:foreground ,err))
                                                  (,t-class (:foreground ,t-err))))
     `(ein:notification-tab-normal               ((,class (:foreground ,builtin))
                                                  (,t-class (:foreground ,t-builtin))))
     `(ein:notification-tab-selected             ((,class (:foreground ,(if (eq variant 'dark) suc green) :bold t))
                                                  (,t-class (:foreground ,(if (eq variant 'dark) t-suc t-green) :bold t))))

;;;;; eldoc
     `(eldoc-highlight-function-argument         ((,class (:foreground ,(if (eq variant 'dark) suc red) :bold t))
                                                  (,t-class (:foreground ,(if (eq variant 'dark) t-suc t-red) :bold t))))

;;;;; erc
     `(erc-input-face                            ((,class (:foreground ,func))
                                                  (,t-class (:foreground ,t-func))))
     `(erc-my-nick-face                          ((,class (:foreground ,key1))
                                                  (,t-class (:foreground ,t-key1))))
     `(erc-nick-default-face                     ((,class (:foreground ,inf))
                                                  (,t-class (:foreground ,t-inf))))
     `(erc-nick-prefix-face                      ((,class (:foreground ,yellow))
                                                  (,t-class (:foreground ,t-yellow))))
     `(erc-notice-face                           ((,class (:foreground ,str))
                                                  (,t-class (:foreground ,t-str))))
     `(erc-prompt-face                           ((,class (:foreground ,(if (eq variant 'dark) suc green) :bold t))
                                                  (,t-class (:foreground ,(if (eq variant 'dark) t-suc t-green) :bold t))))
     `(erc-timestamp-face                        ((,class (:foreground ,builtin))
                                                  (,t-class (:foreground ,t-builtin))))

;;;;; eshell
     `(eshell-ls-archive                         ((,class (:foreground ,red :weight bold))
                                                  (,t-class (:foreground ,t-red :weight bold))))
     `(eshell-ls-backup                          ((,class (:inherit font-lock-comment-face))
                                                  (,t-class (:inherit font-lock-comment-face))))
     `(eshell-ls-clutter                         ((,class (:inherit font-lock-comment-face))
                                                  (,t-class (:inherit font-lock-comment-face))))
     `(eshell-ls-directory                       ((,class (:foreground ,inf :weight bold))
                                                  (,t-class (:foreground ,t-inf :weight bold))))
     `(eshell-ls-executable                      ((,class (:foreground ,suc :weight bold))
                                                  (,t-class (:foreground ,t-suc :weight bold))))
     `(eshell-ls-missing                         ((,class (:inherit font-lock-warning-face))
                                                  (,t-class (:inherit font-lock-warning-face))))
     `(eshell-ls-product                         ((,class (:inherit font-lock-doc-face))
                                                  (,t-class (:inherit font-lock-doc-face))))
     `(eshell-ls-special                         ((,class (:foreground ,yellow :weight bold))
                                                  (,t-class (:foreground ,t-yellow :weight bold))))
     `(eshell-ls-symlink                         ((,class (:foreground ,cyan :weight bold))
                                                  (,t-class (:foreground ,t-cyan :weight bold))))
     `(eshell-ls-unreadable                      ((,class (:foreground ,base3))
                                                  (,t-class (:foreground ,t-base3))))
     `(eshell-prompt                             ((,class (:foreground ,keyword :weight bold))
                                                  (,t-class (:foreground ,t-keyword :weight bold))))

;;;;; evil-search-highlight-persist
     `(evil-search-highlight-persist-highlight-face ((,class (:background ,type :foreground ,base))))

;;;;; flx
     `(flx-highlight-face                       ((,class (:foreground ,comp :underline nil))
                                                 (,t-class (:foreground ,t-comp :underline nil))))
;;;;; flycheck
     `(flycheck-error
       ((,(append '((supports :underline (:style line))) class)
         (:underline (:style line :color ,err)))
        (,class (:foreground ,base :background ,err :weight bold :underline t))
        (,t-class (:foreground ,t-base :background ,t-err :weight bold :underline t))))
     `(flycheck-error-list-checker-name          ((,class (:foreground ,keyword))
                                                  (,t-class (:foreground ,t-keyword))))
     `(flycheck-fringe-error                     ((,class (:foreground ,err :weight bold))
                                                  (,t-class (:foreground ,t-err :weight bold))))
     `(flycheck-fringe-info                      ((,class (:foreground ,inf :weight bold))
                                                  (,t-class (:foreground ,t-inf :weight bold))))
     `(flycheck-fringe-warning                   ((,class (:foreground ,war :weight bold))
                                                  (,t-class (:foreground ,t-war :weight bold))))
     `(flycheck-info
       ((,(append '((supports :underline (:style line))) class)
         (:underline (:style line :color ,inf)))
        (,class (:foreground ,base :background ,blue-bg :weight bold :underline t))
        (,t-class (:foreground ,t-base :background ,t-blue-bg :weight bold :underline t))))
     `(flycheck-warning
       ((,(append '((supports :underline (:style line))) class)
         (:underline (:style line :color ,war)))
        (,class (:foreground ,base :background ,war :weight bold :underline t))
        (,t-class (:foreground ,t-base :background ,t-war :weight bold :underline t))))

;;;;; git-gutter-fr
     `(git-gutter-fr:added                      ((,class (:foreground ,green :weight bold))
                                                 (,t-class (:foreground ,t-green :weight bold))))
     `(git-gutter-fr:deleted                    ((,class (:foreground ,war :weight bold))
                                                 (,t-class (:foreground ,t-war :weight bold))))
     `(git-gutter-fr:modified                   ((,class (:foreground ,inf :weight bold))
                                                 (,t-class (:foreground ,t-inf :weight bold))))

;;;;; git-timemachine
     `(git-timemachine-minibuffer-detail-face   ((,class (:foreground ,inf :bold t :background ,org-h1-bg))
                                                 (,t-class (:foreground ,t-inf :bold t :background ,t-org-h1-bg))))

;;;;; gnus
     `(gnus-emphasis-highlight-words            ((,class (:background ,(if (eq variant 'dark) err suc) :foreground ,(when (eq variant 'light) bg1)))
                                                 (,t-class (:background ,(if (eq variant 'dark) t-err t-suc) :foreground ,(when (eq variant 'light) t-bg1)))))
     `(gnus-header-content                      ((,class (:foreground ,keyword))
                                                 (,t-class (:foreground ,t-keyword))))
     `(gnus-header-from                         ((,class (:foreground ,var))
                                                 (,t-class (:foreground ,t-var))))
     `(gnus-header-name                         ((,class (:foreground ,comp))
                                                 (,t-class (:foreground ,t-comp))))
     `(gnus-header-subject                      ((,class (:foreground ,func :bold t))
                                                 (,t-class (:foreground ,t-func :bold t))))
     `(gnus-summary-cancelled                   ((,class (:background ,(if (eq variant 'dark) err suc) :foreground ,bg1))
                                                 (,t-class (:background ,(if (eq variant 'dark) t-err t-suc) :foreground ,t-bg1))))

;;;;; guide-key
     `(guide-key/highlight-command-face         ((,class (:foreground ,base))
                                                 (,t-class (:foreground ,t-base3))))
     `(guide-key/key-face                       ((,class (:foreground ,key1))
                                                 (,t-class (:foreground ,t-key1))))
     `(guide-key/prefix-command-face            ((,class (:foreground ,const :weight bold))
                                                 (,t-class (:foreground ,t-const :weight bold))))

;;;;; Haskell
     `(haskell-interactive-face-compile-warning  ((,class (:underline (:color ,yellow :style wave)))
                                                  (,t-class (:underline (:color ,t-yellow :style wave)))))
     `(haskell-interactive-face-compile-error    ((,class (:underline (:color ,err :style wave)))
                                                  (,t-class (:underline (:color ,t-err :style wave)))))
     `(haskell-interactive-face-garbage          ((,class (:foreground ,bg4 :background nil))
                                                  (,t-class (:foreground ,t-bg4 :background nil))))
     `(haskell-interactive-face-prompt           ((,class (:foreground ,base :background nil))
                                                  (,t-class (:foreground ,t-base :background nil))))
     `(haskell-interactive-face-result           ((,class (:foreground ,base3 :background nil))
                                                  (,t-class (:foreground ,t-base3 :background nil))))
     `(haskell-literate-comment-face             ((,class (:foreground ,base :background nil))
                                                  (,t-class (:foreground ,t-base :background nil))))
     `(haskell-pragma-face                       ((,class (:foreground ,builtin :background nil))
                                                  (,t-class (:foreground ,t-builtin :background nil))))
     `(haskell-constructor-face                  ((,class (:foreground ,type :background nil))
                                                  (,t-class (:foreground ,t-type :background nil))))
;;;;; helm
     `(helm-apt-deinstalled                     ((,class (:foreground ,base2))
                                                 (,t-class (:foreground ,base2))))
     `(helm-apt-installed                       ((,class (:foreground ,green))
                                                 (,t-class (:foreground ,t-green))))
     `(helm-bookmark-directory                  ((,class (:inherit helm-ff-directory))
                                                 (,t-class (:inherit helm-ff-directory))))
     `(helm-bookmark-file                       ((,class (:foreground ,base3))
                                                 (,t-class (:foreground ,t-base3))))
     `(helm-bookmark-gnus                       ((,class (:foreground ,cyan))
                                                 (,t-class (:foreground ,t-cyan))))
     `(helm-bookmark-info                       ((,class (:foreground ,comp))
                                                 (,t-class (:foreground ,t-comp))))
     `(helm-bookmark-man                        ((,class (:foreground ,yellow))
                                                 (,t-class (:foreground ,t-yellow))))
     `(helm-bookmark-w3m                        ((,class (:foreground ,violet))
                                                 (,t-class (:foreground ,t-violet))))
     `(helm-buffer-directory                    ((,class (:foreground ,base3 :background ,bg1))
                                                 (,t-class (:foreground ,t-base3 :background ,t-bg1))))
     `(helm-buffer-file                         ((,class (:foreground ,base :background ,bg1))
                                                 (,t-class (:foreground ,t-base :background ,t-bg1))))
     `(helm-buffer-not-saved                    ((,class (:foreground ,comp :background ,bg1))
                                                 (,t-class (:foreground ,t-comp :background ,t-bg1))))
     `(helm-buffer-process                      ((,class (:foreground ,builtin :background ,bg1))
                                                 (,t-class (:foreground ,t-builtin :background ,t-bg1))))
     `(helm-buffer-saved-out                    ((,class (:foreground ,t-base :background ,bg1))
                                                 (,t-class (:foreground ,t-base3 :background ,t-bg1))))
     `(helm-buffer-size                         ((,class (:foreground ,base :background ,bg1))
                                                 (,t-class (:foreground ,t-base :background ,t-bg1))))
     `(helm-candidate-number                    ((,class (:background ,bg1 :foreground ,bg4 :bold t))
                                                 (,t-class (:background ,t-bg1 :foreground ,t-bg4 :bold t))))
     `(helm-ff-directory                        ((,class (:foreground ,cyan :background ,bg1 :weight bold))
                                                 (,t-class (:foreground ,t-cyan :background ,t-bg1 :weight bold))))
     `(helm-ff-dotted-directory                 ((,class (:foreground ,key1 :background ,bg1 :weight bold))
                                                 (,t-class (:foreground ,t-key1 :background ,t-bg1 :weight bold))))
     `(helm-ff-executable                       ((,class (:foreground ,suc :background ,bg1 :weight normal))
                                                 (,t-class (:foreground ,t-suc :background ,t-bg1 :weight normal))))
     `(helm-ff-file                             ((,class (:foreground ,base :background ,bg1 :weight normal))
                                                 (,t-class (:foreground ,t-base3 :background ,bg1 :weight normal))))
     `(helm-ff-invalid-symlink                  ((,class (:foreground ,err :background ,bg1 :weight bold))
                                                 (,t-class (:foreground ,t-err :background ,t-bg1 :weight bold))))
     `(helm-ff-prefix                           ((,class (:foreground ,bg1 :background ,base2 :weight normal))
                                                 (,t-class (:foreground ,t-bg1 :background ,t-base2 :weight bold))))
     `(helm-ff-symlink                          ((,class (:foreground ,cyan :background ,bg1 :weight bold))
                                                 (,t-class (:foreground ,t-cyan :background ,bg1 :weight bold))))
     `(helm-grep-cmd-line                       ((,class (:foreground ,base :background ,bg1))
                                                 (,t-class (:foreground ,t-base))))
     `(helm-grep-file                           ((,class (:foreground ,base :background ,bg1))
                                                 (,t-class (:foreground ,t-base :background ,t-bg1))))
     `(helm-grep-finish                         ((,class (:foreground ,base :background ,bg1))
                                                 (,t-class (:foreground ,t-base :background ,t-bg1))))
     `(helm-grep-lineno                         ((,class (:foreground ,base :background ,bg1))
                                                 (,t-class (:foreground ,t-base :background ,t-bg1))))
     `(helm-grep-match                          ((,class (:foreground nil :background nil :inherit helm-match))
                                                 (,t-class (:foreground nil :background nil :inherit helm-match))))
     `(helm-grep-running                        ((,class (:foreground ,func :background ,bg1))
                                                 (,t-class (:foreground ,t-func :background ,t-bg1))))
     `(helm-header                              ((,class (:foreground ,base :background ,bg1 :underline nil :box nil))
                                                 (,t-class (:foreground ,t-base3 :background ,t-bg1 :box nil))))
     `(helm-header-line-left-margin             ((,class (:foreground ,inf :background ,nil))
                                                 (,t-class (:foreground ,t-inf :background ,nil))))
     `(helm-M-x-key                             ((,class (:foreground ,builtin :underline t))
                                                 (,t-class (:foreground ,t-builtin :underline t))))
     `(helm-match                               ((,class (:foreground ,bg1 :background ,type :weight bold))
                                                 (,t-class (:foreground ,t-bg1 :background ,t-type :weight bold))))
     `(helm-match-item                          ((,class (:inherit match))
                                                 (,t-class (:inherit match))))
     `(helm-moccur-buffer                       ((,class (:foreground ,func :background ,bg1))
                                                 (,t-class (:foreground ,t-func :background ,t-bg1))))
     `(helm-selection                           ((,class (:background ,bg2 :foreground ,inf))
                                                 (,t-class (:background ,t-bg2 :foreground ,t-inf))))
     `(helm-selection-line                      ((,class (:background ,base2))
                                                 (,t-class (:background ,t-base2))))
     `(helm-separator                           ((,class (:foreground ,comp :background ,bg1))
                                                 (,t-class (:foreground ,t-comp :background ,t-bg1))))
     `(helm-source-header                       ((,class (:background ,base2 :foreground ,bg1 :bold t))
                                                 (,t-class (:background ,t-base2 :foreground ,t-bg1 :bold t))))
     `(helm-time-zone-current                   ((,class (:foreground ,builtin :background ,bg1))
                                                 (,t-class (:foreground ,t-builtin :background ,t-bg1))))
     `(helm-time-zone-home                      ((,class (:foreground ,comp :background ,bg1))
                                                 (,t-class (:foreground ,t-comp :background ,t-bg1))))
     `(helm-visible-mark                        ((,class (:foreground ,bg1 :background ,green-bg))
                                                 (,t-class (:foreground ,t-bg1 :background ,t-green-bg))))

;;;;; helm-swoop
     `(helm-swoop-target-line-block-face        ((,class (:foreground ,base :background ,green-bg))
                                                 (,t-class (:foreground ,t-base :background ,t-green-bg))))
     `(helm-swoop-target-line-face              ((,class (:foreground ,base :background ,green-bg))
                                                 (,t-class (:foreground ,t-base :background ,t-green-bg))))
     `(helm-swoop-target-word-face              ((,class (:foreground ,bg1 :background ,suc))
                                                 (,t-class (:foreground ,t-bg1 :background ,t-suc))))

     ;; Highlight indentation mode
     `(highlight-indentation-current-column-face ((,class (:background ,bg4))
                                                  (,t-class (:background ,t-bg4))))
     `(highlight-indentation-face                ((,class (:background ,bg2))
                                                  (,t-class (:background ,t-bg2))))

     ;; Highlight-numbers
     `(highlight-numbers-number                  ((,class (:background ,bg1 :foreground ,base3 :bold nil))
                                                  (,t-class (:background ,bg1 :foreground ,t-base3 :bold nil))))

     ;; Highlight-symbol
     `(highlight-symbol-face                     ((,class (:background ,bg3 :foreground ,green))
                                                  (,t-class (:background ,t-bg3 :foreground ,t-green))))

     ;; hydra
     `(hydra-face-red                            ((,class (:foreground ,red))
                                                  (,t-class (:foreground ,t-red))))
     `(hydra-face-blue                           ((,class (:foreground ,inf))
                                                  (,t-class (:foreground ,t-inf))))
     `(hydra-face-amaranth                       ((,class (:foreground ,yellow))
                                                  (,t-class (:foreground ,t-yellow))))
     `(hydra-face-pink                           ((,class (:foreground ,str))
                                                  (,t-class (:foreground ,t-str))))
     `(hydra-face-teal                           ((,class (:foreground ,green))
                                                  (,t-class (:foreground ,t-green))))

;;;;; ido
     `(ido-first-match                          ((,class (:foreground ,inf :bold t))
                                                 (,t-class (:foreground ,t-inf :bold t))))
     `(ido-only-match                           ((,class (:foreground ,(if (eq variant 'dark) suc red) :bold t))
                                                 (,t-class (:foreground ,(if (eq variant 'dark) t-suc t-red) :bold t))))
     `(ido-subdir                               ((,class (:foreground ,cyan))
                                                 (,t-class (:foreground ,t-cyan))))
     `(ido-vertical-match-face                  ((,class (:foreground ,base :underline nil))
                                                 (,t-class (:foreground ,t-base :underline nil))))

;;;;; ivy
     `(ivy-confirm-face                          ((,class (:foreground ,green))
                                                  (,t-class (:foreground ,t-green))))
     `(ivy-current-match                         ((,class (:foreground ,(if (eq variant 'dark) base bg1) :background ,blue-bg))
                                                  (,t-class (:foreground ,(if (eq variant 'dark) t-base t-bg1) :background ,t-blue-bg))))
     `(ivy-match-required-face                   ((,class (:foreground ,cyan))
                                                  (,t-class (:foreground ,t-cyan))))
     `(ivy-minibuffer-match-face-1               ((,class (:foreground ,base2))
                                                  (,t-class (:foreground ,t-base2))))
     `(ivy-minibuffer-match-face-2               ((,class (:foreground ,keyword))
                                                  (,t-class (:foreground ,t-keyword))))
     `(ivy-minibuffer-match-face-3               ((,class (:foreground ,type))
                                                  (,t-class (:foreground ,t-type))))
     `(ivy-minibuffer-match-face-4               ((,class (:foreground ,key1))
                                                  (,t-class (:foreground ,t-key1))))
     `(ivy-remote                                ((,class (:foreground ,yellow))
                                                  (,t-class (:foreground ,t-yellow))))

;;;;; info
     `(info-header-xref                          ((,class (:foreground ,func :underline t))
                                                  (,t-class (:foreground ,t-func :underline t))))
     `(info-menu                                 ((,class (:foreground ,suc))
                                                  (,t-class (:foreground ,t-suc))))
     `(info-node                                 ((,class (:foreground ,func :bold t))
                                                  (,t-class (:foreground ,t-func :bold t))))
     `(info-quoted-name                          ((,class (:foreground ,builtin))
                                                  (,t-class (:foreground ,t-builtin))))
     `(info-reference-item                       ((,class (:background nil :underline t :bold t))
                                                  (,t-class (:background nil :underline t :bold t))))
     `(info-string                               ((,class (:foreground ,str))))
     `(info-title-1                              ((,class (:height 1.4 :bold t))
                                                  (,t-class (:height 1.4 :bold t))))
     `(info-title-2                              ((,class (:height 1.3 :bold t))
                                                  (,t-class (:height 1.3 :bold t))))
     `(info-title-3                              ((,class (:height 1.3))
                                                  (,t-class (:height 1.3))))
     `(info-title-4                              ((,class (:height 1.2))
                                                  (,t-class (:height 1.2))))

;;;;; js2 / js3
     `(js2-external-variable                     ((,class (:foreground ,comp  ))
                                                  (,t-class (:foreground ,t-comp))))
     `(js2-function-param                        ((,class (:foreground ,const))
                                                  (,t-class (:foregorund ,t-const))))
     `(js2-jsdoc-html-tag-delimiter              ((,class (:foreground ,type))
                                                  (,t-class (:foreground ,t-type))))
     `(js2-jsdoc-html-tag-name                   ((,class (:foreground ,key1))
                                                  (,t-class (:foreground ,t-key1))))
     `(js2-jsdoc-value                           ((,class (:foreground ,str))
                                                  (,t-class (:foreground ,t-str))))
     `(js2-private-function-call                 ((,class (:foreground ,const))
                                                  (,t-class (:foreground ,t-const))))
     `(js2-private-member                        ((,class (:foreground ,base))
                                                  (,t-class (:foreground ,t-base))))
     `(js3-error-face                            ((,class (:underline ,war))
                                                  (,t-class (:underline ,t-war))))
     `(js3-external-variable-face                ((,class (:foreground ,var))
                                                  (,t-class (:foreground ,t-var))))
     `(js3-function-param-face                   ((,class (:foreground ,key2))
                                                  (,t-class (:foreground ,t-key2))))
     `(js3-instance-member-face                  ((,class (:foreground ,const))
                                                  (,t-class (:foreground ,t-const))))
     `(js3-jsdoc-tag-face                        ((,class (:foreground ,keyword))
                                                  (,t-class (:foreground ,t-keyword))))
     `(js3-warning-face                          ((,class (:underline ,keyword))
                                                  (,t-class (:underline ,t-keyword))))

;;;;; linum-mode
     `(linum                                     ((,class (:foreground ,bg4 :background ,bg1))
                                                  (,t-class (:foreground ,t-bg4 :background ,t-bg1))))
;;;;; lui
     `(lui-irc-colors-fg-1-face                  ((,class (:foreground ,bg3))
                                                  (,t-class (:foreground ,t-bg3))))
     `(lui-irc-colors-fg-2-face                  ((,class (:foreground ,type))
                                                  (,t-class (:foreground ,t-type))))
     `(lui-irc-colors-fg-3-face                  ((,class (:foreground ,green))
                                                  (,t-class (:foreground ,t-green))))
     `(lui-irc-colors-fg-4-face                  ((,class (:foreground ,comp))
                                                  (,t-class (:foreground ,t-comp))))
     `(lui-irc-colors-fg-5-face                  ((,class (:foreground ,key1))
                                                  (,t-class (:foreground ,t-key1))))
     `(lui-irc-colors-fg-6-face                  ((,class (:foreground ,violet))
                                                  (,t-class (:foreground ,t-violet))))
     `(lui-irc-colors-fg-7-face                  ((,class (:foreground ,yellow))
                                                  (,t-class (:foreground ,t-yellow))))
     `(lui-irc-colors-fg-8-face                  ((,class (:foreground ,war))
                                                  (,t-class (:foreground ,t-war))))
     `(lui-irc-colors-fg-9-face                  ((,class (:foreground ,green))
                                                  (,t-class (:foreground ,t-green))))
     `(lui-irc-colors-fg-10-face                  ((,class (:foreground ,builtin))
                                                  (,t-class (:foreground ,t-builtin))))
     `(lui-irc-colors-fg-11-face                  ((,class (:foreground ,cyan))
                                                  (,t-class (:foreground ,t-cyan))))
     `(lui-irc-colors-fg-12-face                  ((,class (:foreground ,inf))
                                                  (,t-class (:foreground ,t-inf))))
     `(lui-irc-colors-fg-13-face                  ((,class (:foreground ,str))
                                                   (,t-class (:foreground ,t-str))))
     `(lui-irc-colors-fg-14-face                  ((,class (:foreground ,bg4))
                                                   (,t-class (:foreground ,t-bg4))))
     `(lui-irc-colors-fg-15-face                  ((,class (:foreground ,base3))
                                                   (,t-class (:foreground ,t-base3))))
     `(lui-button-face                            ((,class (:inherit link))
                                                   (,t-class (:inherit link))))
     `(lui-highlight-face                         ((,class (:foreground ,suc :weight bold))
                                                   (,t-class (:foreground ,t-suc :weight bold))))
     `(lui-time-stamp-face                        ((,class (:inherit font-lock-comment-face))
                                                   (,t-class (:inherit font-lock-comment-face))))

;;;;; Magit
     `(magit-blame-culprit                       ((,class (:foreground ,yellow))
                                                  (,t-class (:foreground ,t-yellow))))
     `(magit-blame-header                        ((,class (:foreground ,green))
                                                  (,t-class (:foreground ,t-green))))
     `(magit-blame-sha1                          ((,class (:foreground ,red))
                                                  (,t-class (:foreground ,t-red))))
     `(magit-blame-subject                       ((,class (:foreground ,yellow))
                                                  (,t-class (:foreground ,t-yellow))))
     `(magit-blame-time                          ((,class (:foreground ,str))
                                                  (,t-class (:foreground ,t-str))))
     `(magit-blame-name                          ((,class (:foreground ,comment))
                                                  (,t-class (:foreground ,t-comment))))
     `(magit-blame-heading                       ((,class (:foreground ,green))
                                                  (,t-class (:foreground ,t-green))))
     `(magit-blame-hash                          ((,class (:foreground ,red))
                                                  (,t-class (:foreground ,t-red))))
     `(magit-blame-summary                       ((,class (:foreground ,bg4))
                                                  (,t-class (:foreground ,t-bg4))))
     `(magit-blame-date                          ((,class (:foreground ,cyan))
                                                  (,t-class (:foreground ,t-cyan))))
     `(magit-branch                              ((,class (:foreground ,cyan :background nil))
                                                  (,t-class (:foreground ,t-cyan :background nil))))
     `(magit-branch-local                        ((,class (:foreground ,violet :background nil))
                                                  (,t-class (:foreground ,t-violet :background nil))))
     `(magit-branch-remote                       ((,class (:foreground ,yellow :background nil))
                                                  (,t-class (:foreground ,t-yellow :background nil))))
     `(magit-cherry-equivalent                   ((,class (:foreground ,keyword))
                                                  (,t-class (:foreground ,t-keyword))))
     `(magit-cherry-unmatched                    ((,class (:foreground ,war))
                                                  (,t-class (:foreground ,t-war))))
     `(magit-diff-context                        ((,class (:foreground ,bg3 :background nil))
                                                  (,t-class (:foreground ,t-bg3 :background nil))))
     `(magit-diff-context-highlight              ((,class (:foreground ,bg4 :background ,bg1))
                                                  (,t-class (:foreground ,t-bg4 :background ,t-bg1))))
     `(magit-diff-added                          ((,class (:foreground ,base :background ,green-bg))
                                                  (,t-class (:foreground ,t-base :background ,t-green-bg))))
     `(magit-diff-added-highlight                ((,class (:foreground ,base3 :background ,green-bg))
                                                  (,t-class (:foreground ,t-base3 :background ,t-green-bg))))
     `(magit-diff-removed                        ((,class (:foreground ,base :background ,red-bg))
                                                  (,t-class (:foreground ,t-base :background ,t-red-bg))))
     `(magit-diff-removed-highlight              ((,class (:foreground ,base :background ,red-bg))
                                                  (,t-class (:foreground ,t-base :background ,t-red-bg))))
     `(magit-diff-add                            ((,class (:foreground ,green))
                                                  (,t-class (:foreground ,t-green))))
     `(magit-diff-del                            ((,class (:foreground ,base))
                                                  (,t-class (:foreground ,t-base))))
     `(magit-diff-file-header                    ((,class (:foreground ,type))
                                                  (,t-class (:foreground ,t-type))))
     `(magit-diff-hunk-header                    ((,class (:foreground ,builtin))
                                                  (,t-class (:foreground ,t-builtin))))
     `(magit-diff-merge-current                  ((,class (:background ,yellow))
                                                  (,t-class (:background ,t-yellow))))
     `(magit-diff-merge-diff3-separator          ((,class (:foreground ,keyword :weight bold))
                                                  (,t-class (:foreground ,t-keyword :weight bold))))
     `(magit-diff-merge-proposed                 ((,class (:background ,cyan))
                                                  (,t-class (:background ,t-cyan))))
     `(magit-diff-merge-separator                ((,class (:foreground ,keyword))
                                                  (,t-class (:foreground ,t-keyword))))
     `(magit-diff-none                           ((,class (:foreground ,bg4))
                                                  (,t-class (:foreground ,t-bg4))))
     `(magit-item-highlight                      ((,class (:background ,bg2 :weight normal))
                                                  (,t-class (:background ,t-bg2 :weight normal))))
     `(magit-item-mark                           ((,class (:background ,bg1))
                                                  (,t-class (:background ,t-bg1))))
     `(magit-key-mode-args-face                  ((,class (:foreground ,base2))
                                                  (,t-class (:foreground ,t-base2))))
     `(magit-key-mode-button-face                ((,class (:foreground ,keyword :weight bold))
                                                  (,t-class (:foreground ,t-keyword :weight bold))))
     `(magit-key-mode-header-face                ((,class (:foreground ,base2 :weight bold))
                                                  (,t-class (:foreground ,t-base2 :weight bold))))
     `(magit-key-mode-switch-face                ((,class (:foreground ,violet :weight bold))
                                                  (,t-class (:foreground ,t-violet :weight bold))))
     `(magit-log-author                          ((,class (:foreground ,builtin))
                                                  (,t-class (:foreground ,t-builtin))))
     `(magit-log-date                            ((,class (:foreground ,keyword))
                                                  (,t-class (:foreground ,t-keyword))))
     `(magit-log-graph                           ((,class (:foreground ,base3))
                                                  (,t-class (:foreground ,t-base3))))
     `(magit-log-head-label-bisect-bad           ((,class (:foreground ,err))
                                                  (,t-class (:foreground ,t-err))))
     `(magit-log-head-label-bisect-good          ((,class (:foreground ,green))
                                                  (,t-class (:foreground ,t-green))))
     `(magit-log-head-label-bisect-skip          ((,class (:foreground ,yellow))
                                                  (,t-class (:foreground ,t-yellow))))
     `(magit-log-head-label-default              ((,class (:foreground ,keyword))
                                                  (,t-class (:foreground ,t-keyword))))
     `(magit-log-head-label-head                 ((,class (:foreground ,base :background ,cyan))
                                                  (,t-class (:foreground ,t-base :background ,t-cyan))))
     `(magit-log-head-label-local                ((,class (:foreground ,keyword :weight bold))
                                                  (,t-class (:foreground ,t-keyword :weight bold))))
     `(magit-log-head-label-patches              ((,class (:foreground ,keyword))
                                                  (,t-class (:foreground ,t-keyword))))
     `(magit-log-head-label-remote               ((,class (:foreground ,key2 :weight bold))
                                                  (,t-class (:foreground ,t-key2 :weight bold))))
     `(magit-log-head-label-tags                 ((,class (:foreground ,builtin))
                                                  (,t-class (:foreground ,t-builtin))))
     `(magit-log-head-label-wip                  ((,class (:foreground ,red))
                                                  (,t-class (:foreground ,t-red))))
     `(magit-log-message                         ((,class (:foreground ,base3))
                                                  (,t-class (:foreground ,t-base3))))
     `(magit-log-reflog-label-amend              ((,class (:foreground ,inf))
                                                  (,t-class (:foreground ,t-inf))))
     `(magit-log-reflog-label-checkout           ((,class (:foreground ,yellow))
                                                  (,t-class (:foreground ,t-yellow))))
     `(magit-log-reflog-label-cherry-pick        ((,class (:foreground ,red))
                                                  (,t-class (:foreground ,t-red))))
     `(magit-log-reflog-label-commit             ((,class (:foreground ,green))
                                                  (,t-class (:foreground ,t-green))))
     `(magit-log-reflog-label-merge              ((,class (:foreground ,func))
                                                  (,t-class (:foreground ,t-func))))
     `(magit-log-reflog-label-other              ((,class (:foreground ,red))
                                                  (,t-class (:foreground ,t-red))))
     `(magit-log-reflog-label-rebase             ((,class (:foreground ,type))
                                                  (,t-class (:foreground ,t-type))))
     `(magit-log-reflog-label-remote             ((,class (:foreground ,mkwd))
                                                  (,t-class (:foreground ,t-mkwd))))
     `(magit-log-reflog-label-reset              ((,class (:foreground ,const))
                                                  (,t-class (:foreground ,t-const))))
     `(magit-log-sha1                            ((,class (:foreground ,type))
                                                  (,t-class (:foreground ,t-type))))
     `(magit-process-ng                          ((,class (:foreground ,inf :weight bold))
                                                  (,t-class (:foreground ,t-inf :weight bold))))
     `(magit-process-ok                          ((,class (:foreground ,green :weight bold))
                                                  (,t-class (:foreground ,t-green :weight bold))))
     `(magit-section-heading                     ((,class (:foreground ,base3 :background ,blue-bg))
                                                  (,t-class (:foreground ,t-base3 :background ,t-blue-bg))))
     `(magit-signature-bad                       ((,class (:foreground ,err :weight bold))
                                                  (,t-class (:foreground ,t-err :weight bold))))
     `(magit-signature-good                      ((,class (:foreground ,green :weight bold))
                                                  (,t-class (:foreground ,t-green :weight bold))))
     `(magit-signature-none                      ((,class (:foreground ,red))
                                                  (,t-class (:foreground ,t-red))))
     `(magit-signature-untrusted                 ((,class (:foreground ,violet :weight bold))
                                                  (,t-class (:foreground ,t-violet :weight bold))))
     `(magit-tag                                 ((,class (:foreground ,suc))
                                                  (,t-class (:foreground ,t-suc))))
     `(magit-whitespace-warning-face             ((,class (:background ,red))
                                                  (,t-class (:background ,t-red))))
     `(magit-bisect-bad                          ((,class (:foreground ,red))
                                                  (,t-class (:foreground ,t-red))))
     `(magit-bisect-good                         ((,class (:foreground ,green))
                                                  (,t-class (:foreground ,t-green))))
     `(magit-bisect-skip                         ((,class (:foreground ,base3))
                                                  (,t-class (:foreground ,t-base3))))
;;;;; markdown-mode
     `(markdown-blockquote-face                  ((,class (:inherit font-lock-doc-face))
                                                  (,t-class (:inherit font-lock-doc-face))))
     `(markdown-comment-face                     ((,class (:inherit font-lock-comment-face :strikethrough t))
                                                  (,t-class (:inherit font-lock-comment-face :strikethrough t))))
     `(markdown-footnote-face                    ((,class (:foreground ,builtin))
                                                  (,t-class (:foreground ,t-builtin))))
     `(markdown-header-delimiter-face            ((,class (:foreground ,base3))
                                                  (,t-class (:foreground ,t-base3))))
     `(markdown-header-face                      ((,class (:foreground ,type))
                                                  (,t-class (:foreground ,t-type))))
     `(markdown-header-face-1                    ((,class (:inherit markdown-header-face))
                                                  (,t-class (:inherit markdown-header-face))))
     `(markdown-header-face-2                    ((,class (:inherit markdown-header-face))
                                                  (,t-class (:inherit markdown-header-face))))
     `(markdown-header-face-3                    ((,class (:inherit markdown-header-face))
                                                  (,t-class (:inherit markdown-header-face))))
     `(markdown-header-face-4                    ((,class (:inherit markdown-header-face))
                                                  (,t-class (:inherit markdown-header-face))))
     `(markdown-header-face-5                    ((,class (:inherit markdown-header-face))
                                                   (,t-class (:inherit markdown-header-face))))
     `(markdown-header-face-6                    ((,class (:inherit markdown-header-face))
                                                  (,t-class (:inherit markdown-header-face))))
     `(markdown-header-rule-face                 ((,class (:foreground ,base2))
                                                  (,t-class (:foreground ,t-base2))))
     `(markdown-inline-code-face                 ((,class (:foreground ,base3))
                                                  (,t-class (:foreground ,t-base3))))
     `(markdown-italic-face                      ((,class (:inherit italic))
                                                  (,t-class (:inherit italic))))
     `(markdown-link-face                        ((,class (:inherit default :foreground ,inf))
                                                  (,t-class (:inherit default :foreground ,t-inf))))
     `(markdown-link-title-face                  ((,class (:inherit font-lock-function-name-face))
                                                  (,t-class (:inherit font-lock-function-name-face))))
     `(markdown-list-face                        ((,class (:inherit font-lock-builtin-face))
                                                  (,t-class (:inherit font-lock-builtin-face))))
     `(markdown-math-face                        ((,class (:inherit font-lock-string-face))
                                                  (,t-class (:inherit font-lock-string-face))))
     `(markdown-metadata-key-face                ((,class (:inherit font-lock-comment-face))
                                                  (,t-class (:inherit font-lock-comment-face))))
     `(markdown-metadata-value-face              ((,class (:inherit default))
                                                  (,t-class (:inherit default))))
     `(markdown-missing-link-face                ((,class (:inherit font-lock-warning-face))
                                                  (,t-class (:inherit font-lock-warning-face))))
     `(markdown-pre-face                         ((,class (:foreground ,base3))
                                                  (,t-class (:foreground ,base3))))
     `(markdown-reference-face                   ((,class (:inherit default :foreground ,violet))
                                                  (,t-class (:inherit default :foreground ,t-violet))))
     `(markdown-url-face                         ((,class (:foreground ,base))
                                                  (,t-class (:foreground ,t-base))))

;;;; matches and isearch
     `(match                                     ((,class (:background ,green-bg :foreground ,base :weight bold))
                                                  (,t-class (:background ,t-green-bg :foreground ,t-base :weight bold))))
     `(lazy-highlight                            ((,class (:foreground ,base :background ,bg2 :weight normal))
                                                  (,t-class (:foreground ,t-base :background ,t-bg2 :weight normal))))
     `(highlight                                 ((,class (:foreground ,base :background ,(if (eq variant 'dark) highlight bg2)))
                                                  (,t-class (:foreground ,t-base :background ,(if (eq variant 'dark) t-highlight t-bg2)))))
     `(isearch                                   ((,class (:bold t :foreground ,(if (eq variant 'dark) base bg1) :background ,blue-bg))
                                                  (,t-class (:bold t :foreground ,(if (eq variant 'dark) t-base t-bg1) :background ,t-blue-bg))))
     `(isearch-fail                              ((,class (:bold t :foreground ,base :background ,red-bg))
                                                  (,t-class (:bold t :foreground ,t-base :background ,t-red-bg))))
     `(show-paren-match-face                     ((,class (:background ,suc :foreground ,bg1))
                                                  (,t-class (:background ,t-suc :foreground ,t-bg1))))
     `(show-paren-mismatch                       ((,class (:background ,err :foreground ,base))
                                                  (,t-class (:background ,t-err :foreground ,t-base))))
     `(success                                   ((,class (:foreground ,bg1 :background ,suc))
                                                  (,t-class (:foreground ,t-bg1 :background ,t-suc))))

;;;;; messages faces
     `(message-header-name                       ((,class (:foreground ,green))
                                                  (,t-class (:foreground ,t-green))))
     `(message-header-cc                         ((,class (:foreground ,yellow))
                                                  (,t-class (:foreground ,t-yellow))))
     `(message-header-other                      ((,class (:foreground ,keyword))
                                                  (,t-class (:foreground ,t-keyword))))
     `(message-header-subject                    ((,class (:foreground ,inf))
                                                  (,t-class (:foreground ,t-inf))))
     `(message-header-to                         ((,class (:foreground ,str))
                                                  (,t-class (:foreground ,t-str))))
     `(message-cited-text                        ((,class (:inherit font-lock-comment-face))
                                                  (,t-class (:inherit font-lock-comment-face))))
     `(message-separator                         ((,class (:foreground ,base3))
                                                  (,t-class (:foreground ,t-base3))))



;;;;; mingus
     `(mingus-directory-face                           ((,class (:foreground ,t-inf))
                                                        (,t-class (:foreground ,t-inf))))
     `(mingus-pausing-face                             ((,class (:foreground ,yellow))
                                                        (,t-class (:foreground ,t-yellow))))
     `(mingus-playing-face                             ((,class (:foreground ,green))
                                                        (,t-class (:foreground ,t-green))))
     `(mingus-playlist-face                            ((,class (:foreground ,builtin))
                                                        (,t-class (:foreground ,t-builtin))))
     `(mingus-song-file-face                           ((,class (:foreground ,keyword))
                                                        (,t-class (:foreground ,t-keyword))))
     `(mingus-stopped-face                             ((,class (:foreground ,err))
                                                        (,t-class (:foreground ,t-err))))
     `(mingus-artist-face                              ((,class (:foreground ,str))
                                                        (,t-class (:foreground ,t-str))))
     `(mingus-album-face                               ((,class (:foreground ,bg4))
                                                        (,t-class (:foreground ,bg4))))
     `(mingus-album-stale-face                         ((,class (:foreground ,bg4))
                                                        (,t-class (:foreground ,bg4))))

;;;;; mode-line
     `(mode-line                                 ((,class (:foreground ,bg4
                                                                       :background ,(if (eq variant 'dark) highlight bg2)
                                                                       :height 0.9
                                                                       :box (:line-width 4 :color
                                                                                         ,(if (eq variant 'dark) highlight bg2))))
                                                  (,t-class (:foreground ,t-bg4
                                                                         :background ,(if (eq variant 'dark) t-highlight t-bg2)
                                                                         :height 0.9
                                                                         :box (:line-width 4 :color
                                                                                           ,(if (eq variant 'dark) t-highlight t-bg2))))))
     `(mode-line-inactive                        ((,class (:foreground ,base2
                                                                       :background ,(if (eq variant 'dark) bg1 highlight)
                                                                       :height 0.9
                                                                       :box (:line-width 4 :color
                                                                                         ,(if (eq variant 'dark) bg1 highlight))))
                                                  (,t-class (:foreground ,t-base2
                                                                         :background ,(if (eq variant 'dark) t-bg1 t-highlight)
                                                                         :height 0.9
                                                                         :box (:line-width 4 :color
                                                                                           ,(if (eq variant 'dark) t-bg1 t-highlight))))))
     `(mode-line-buffer-id                       ((,class (:bold t :foreground ,keyword))
                                                  (,t-class (:bold t :foreground ,t-keyword))))

;;;;; neotree
     `(neo-dir-link-face                         ((,class (:foreground ,inf :weight bold))
                                                  (,t-class (:foreground ,t-inf :weight bold))))
     `(neo-expand-btn-face                       ((,class (:foreground ,bg4))
                                                  (,t-class (:foreground ,t-bg4))))
     `(neo-file-link-face                        ((,class (:foreground ,base3))
                                                  (,t-class (:foreground ,t-base3))))
     `(neo-root-dir-face                         ((,class (:foreground ,func :weight bold))
                                                  (,t-class (:foreground ,t-func :weight bold))))

;;;;; org
     `(org-agenda-clocking                       ((,class (:foreground ,comp))
                                                  (,t-class (:foreground ,t-comp))))
     `(org-agenda-date                           ((,class (:foreground ,var :height ,(if majapahit-theme-org-height 1.1 1.0)))
                                                  (,t-class (:foreground ,t-var :height ,(if majapahit-theme-org-height 1.1 1.0)))))
     `(org-agenda-date-today                     ((,class (:weight bold :foreground ,keyword :height ,(if majapahit-theme-org-height 1.3 1.0)))
                                                  (,t-class (:weight bold :foreground ,t-keyword :height ,(if majapahit-theme-org-height 1.3 1.0)))))
     `(org-agenda-date-weekend                   ((,class (:weight normal :foreground ,var))
                                                  (,t-class (:weight normal :foreground ,t-var))))
     `(org-agenda-done                           ((,class (:foreground ,(if (eq variant 'dark) suc green) :bold t))
                                                  (,t-class (:foreground ,(if (eq variant 'dark) t-suc t-green) :bold t))))
     `(org-agenda-structure                      ((,class (:weight bold :foreground ,comp))
                                                  (,t-class (:weight bold :foreground ,comp))))
     `(org-block                                 ((,class (:foreground ,base))
                                                  (,t-class (:foreground ,t-base))))
     `(org-block-background                      ((,class (:background ,org-block-bg))
                                                  (,t-class (:background ,t-org-block-bg))))
     `(org-clock-overlay                         ((,class (:foreground ,comp))
                                                  (,t-class (:foreground ,t-comp))))
     `(org-code                                  ((,class (:foreground ,cyan))
                                                  (,t-class (:foreground ,t-cyan))))
     `(org-column                                ((,class (:background ,highlight))
                                                  (,t-class (:background ,t-highlight))))
     `(org-column-title                          ((,class (:background ,highlight))
                                                  (,t-class (:background ,t-highlight))))
     `(org-date                                  ((,class (:underline t :foreground ,var))
                                                  (,t-class (:underline t :foreground ,t-var))))
     `(org-date-selected                         ((,class (:background ,func :foreground ,bg1) )
                                                  (,t-class (:background ,t-func :foreground ,t-bg1))))
     `(org-document-info-keyword                 ((,class (:foreground ,str))
                                                  (,t-class (:foreground ,t-str))))
     `(org-document-title                        ((,class (:foreground ,green :weight bold :height ,(if majapahit-theme-org-height 1.4 1.0) :underline t))
                                                  (,t-class (:foreground ,t-green :weight bold :height ,(if majapahit-theme-org-height 1.4 1.0) :underline t))))
     `(org-done                                  ((,class (:foreground ,(if (eq variant 'dark) suc green) :bold t :overline t :background ,org-h3-bg))
                                                  (,t-class (:foreground ,(if (eq variant 'dark) t-suc t-green) :bold t :overline t :background ,t-org-h3-bg))))
     `(org-ellipsis                              ((,class (:foreground ,builtin))
                                                  (,t-class (:foreground ,t-builtin))))
     `(org-footnote                              ((,class (:underline t :foreground ,base))
                                                  (,t-class (:underline t :foreground ,t-base3))))
     `(org-hide                                  ((,class (:foreground ,base))
                                                  (,t-class (:foreground ,t-base))))
     `(org-level-1                               ((,class (:bold t :foreground ,type :height ,(if majapahit-theme-org-height 1.3 1.0) :background ,org-h1-bg :overline t))
                                                  (,t-class (:bold t :foreground ,t-type :height ,(if majapahit-theme-org-height 1.3 1.0) :background ,t-org-h1-bg :overline t))))
     `(org-level-2                               ((,class (:bold t :foreground ,keyword :height ,(if majapahit-theme-org-height 1.2 1.0) :background ,org-h2-bg))
                                                  (,t-class (:bold t :foreground ,t-keyword :height ,(if majapahit-theme-org-height 1.2 1.0) :background ,t-org-h2-bg))))
     `(org-level-3                               ((,class (:bold nil :foreground ,str :height ,(if majapahit-theme-org-height 1.1 1.0) :background ,org-h3-bg))
                                                  (,t-class (:bold nil :foreground ,t-str :height ,(if majapahit-theme-org-height 1.1 1.0) :background ,t-org-h3-bg))))
     `(org-level-4                               ((,class (:bold nil :foreground ,yellow :background ,org-h4-bg))
                                                  (,t-class (:bold nil :foreground ,t-yellow :background ,t-org-h4-bg))))
     `(org-level-5                               ((,class (:bold nil :foreground ,inf))
                                                  (,t-class (:bold nil :foreground ,t-inf))))
     `(org-level-6                               ((,class (:bold nil :foreground ,str))
                                                  (,t-class (:bold nil :foreground ,t-str))))
     `(org-level-7                               ((,class (:bold nil :foreground ,green))
                                                  (,t-class (:bold nil :foreground ,t-green))))
     `(org-level-8                               ((,class (:bold nil :foreground ,yellow))
                                                  (,t-class (:bold nil :foreground ,t-yellow))))
     `(org-link                                  ((,class (:underline t :foreground ,comment))
                                                  (,t-class (:underline t :foreground ,t-comment))))
     `(org-mode-line-clock-overrun               ((,class (:foreground ,err))
                                                  (,t-class (:foreground ,err))))
     `(org-priority                              ((,class (:foreground ,war :bold t))
                                                  (,t-class (:foreground ,t-war :bold t))))
     `(org-quote                                 ((,class (:inherit org-block :slant italic))
                                                  (,t-class (:inherit org-block :slant italic))))
     `(org-scheduled                             ((,class (:foreground ,comp))
                                                  (,t-class (:foreground ,t-comp))))
     `(org-scheduled-today                       ((,class (:foreground ,func :weight bold :height 1.2))
                                                  (,t-class (:foreground ,t-func :weight bold :height 1.2))))
     `(org-sexp-date                             ((,class (:foreground ,base))
                                                  (,t-class (:foreground ,t-base))))
     `(org-special-keyword                       ((,class (:foreground ,func))
                                                  (,t-class (:foreground ,t-func))))
     `(org-table                                 ((,class (:foreground ,yellow :background ,org-h2-bg))
                                                  (,t-class (:foreground ,t-yellow :background ,t-org-h2-bg))))
     `(org-todo                                  ((,class (:foreground ,war :bold t :overline t :background ,org-h2-bg))
                                                  (,t-class (:foreground ,t-war :bold t :overline t :background ,t-org-h2-bg))))
     `(org-verbatim                              ((,class (:foreground ,inf))
                                                  (,t-class (:foreground ,t-inf))))
     `(org-verse                                 ((,class (:inherit org-block :slant italic))
                                                  (,t-class (:inherit org-block :slant italic))))
     `(org-warning                               ((,class (:foreground ,err))
                                                  (,t-class (:foreground ,t-err))))

;;;;; perspective
     `(persp-selected-face                       ((,class (:bold t :foreground ,func))
                                                  (,t-class (:bold t :foreground ,t-func))))

;;;;; powerline
     `(powerline-active1                         ((,class (:background ,bg1 :foreground ,(if (eq variant 'dark) base bg4) :inherit mode-line))
                                                  (,t-class (:background ,t-bg1 :foreground ,(if (eq variant 'dark) t-base t-bg4) :inherit mode-line))))
     `(powerline-active2                         ((,class (:background ,bg2 :foreground ,base :inherit mode-line))
                                                  (,t-class (:background ,t-bg2 :foreground ,base :inherit mode-line))))
     `(powerline-inactive1                       ((,class (:background ,bg2 :foreground ,base :inherit mode-line))
                                                  (,t-class (:background ,t-bg2 :foreground ,t-base :inherit mode-line))))
     `(powerline-inactive2                       ((,class (:background ,bg3 :foreground ,base :inherit mode-line))
                                                  (,t-class (:background ,t-bg3 :foreground ,t-base :inherit mode-line))))

;;;;; rainbow-delimiters
     `(rainbow-delimiters-depth-1-face           ((,class :foreground ,pth1 :weight bold)
                                                  (,t-class :foreground ,t-pth1 :weight bold)))
     `(rainbow-delimiters-depth-2-face           ((,class :foreground ,pth2 :weight bold)
                                                  (,t-class :foreground ,t-pth2 :weight bold)))
     `(rainbow-delimiters-depth-3-face           ((,class :foreground ,pth3 :weight bold)
                                                  (,t-class :foreground ,t-pth3 :weight bold)))
     `(rainbow-delimiters-depth-4-face           ((,class :foreground ,pth4 :weight bold)
                                                  (,t-class :foreground ,t-pth4 :weight bold)))
     `(rainbow-delimiters-depth-5-face           ((,class :foreground ,pth5 :weight bold)
                                                  (,t-class :foreground ,t-pth5 :weight bold)))
     `(rainbow-delimiters-depth-6-face           ((,class :foreground ,pth6 :weight bold)
                                                  (,t-class :foreground ,t-pth6 :weight bold)))
     `(rainbow-delimiters-depth-7-face           ((,class :foreground ,pth7 :weight bold)
                                                  (,t-class :foreground ,t-pth7 :weight bold)))
     `(rainbow-delimiters-depth-8-face           ((,class :foreground ,pth8 :weight bold)
                                                  (,t-class :foreground ,t-pth8 :weight bold)))
     `(rainbow-delimiters-depth-9-face           ((,class :foreground ,green :weight bold)
                                                  (,t-class :foreground ,t-green :weight bold)))
     `(rainbow-delimiters-depth-10-face           ((,class :foreground ,yellow :weight bold)
                                                  (,t-class :foreground ,t-yellow :weight bold)))
     `(rainbow-delimiters-depth-11-face           ((,class :foreground ,type :weight bold)
                                                  (,t-class :foreground ,t-type :weight bold)))
     `(rainbow-delimiters-depth-12-face           ((,class :foreground ,pth8 :weight bold)
                                                  (,t-class :foreground ,t-pth8 :weight bold)))
     `(rainbow-delimiters-unmatched-face         ((,class :foreground ,war :bold t)
                                                  (,t-class :foreground ,t-war :bold t)))

;;;;; shm
     `(shm-current-face                          ((,class (:background ,green-bg))
                                                  (,t-class (:background ,t-green-bg))))
     `(shm-quarantine-face                       ((,class (:background ,red-bg))
                                                  (,t-class (:background ,t-red-bg))))

;;;;; smartparens
     `(sp-pair-overlay-face                      ((,class (:background ,(if (eq variant 'dark) bg2 highlight) :foreground nil))
                                                  (,t-class (:background ,(if (eq variant 'dark) t-bg2 t-highlight) :foreground nil))))
     `(sp-show-pair-match-face                   ((,class (:foreground ,(if (eq variant 'dark) suc red) :weight bold :underline t))
                                                  (,t-class (:foreground ,(if (eq variant 'dark) t-suc t-red) :weight bold underline t))))

     ;; spaceline
     `(spaceline-evil-emacs                      ((,class (:background ,type :foreground ,base :inherit mode-line))
                                                  (,t-class (:background ,t-type :foreground ,t-base :inherit mode-line))))
     `(spaceline-evil-insert                     ((,class (:background ,green :foreground ,base :inherit mode-line))
                                                  (,t-class (:background ,t-green :foreground ,t-base :inherit mode-line))))
     `(spaceline-evil-motion                     ((,class (:background ,keyword :foreground ,base :inherit mode-line))
                                                  (,t-class (:background ,t-keyword :foreground ,t-base :inherit mode-line))))
     `(spaceline-evil-normal                     ((,class (:background ,cyan :foreground ,base :inherit mode-line))
                                                  (,t-class (:background ,t-cyan :foreground ,t-base :inherit mode-line))))
     `(spaceline-evil-replace                    ((,class (:background ,mkwd :foreground ,base :inherit mode-line))
                                                  (,t-class (:background ,t-mkwd :foreground ,t-base :inherit mode-line))))
     `(spaceline-highlight-face                  ((,class (:background ,str :foreground ,base :inherit mode-line))
                                                  (,t-class (:background ,t-str :foreground ,t-base :inherit mode-line))))

;;;;; swiper
     `(swiper-line-face                          ((,class (:background ,bg2))
                                                  (,t-class (:background ,t-bg2))))
     `(swiper-match-face-1                       ((,class (:weight bold :foreground ,keyword))
                                                  (,t-class (:weight bold :foreground ,t-keyword))))
     `(swiper-match-face-2                       ((,class (:weight bold :foreground ,const))
                                                  (,t-class (:weight bold :foreground ,t-const))))
     `(swiper-match-face-3                       ((,class (:weight bold :foreground ,builtin))
                                                  (,t-class (:weight bold :foreground ,builtin))))
     `(swiper-match-face-4                       ((,class (:weight bold :foreground ,const))
                                                  (,t-class (:weight bold :foreground ,const))))

;;;;; term
     `(term                                      ((,class (:foreground ,base :background ,bg1))
                                                  (,t-class (:foreground ,t-base :background ,t-bg1))))
     `(term-color-black                          ((,class (:foreground ,bg4))
                                                  (,t-class (:foreground ,t-base2))))
     `(term-color-blue                           ((,class (:foreground ,inf))
                                                  (,t-class (:foreground ,t-inf))))
     `(term-color-cyan                           ((,class (:foreground ,builtin))
                                                  (,t-class (:foreground ,t-builtin))))
     `(term-color-green                          ((,class (:foreground ,green))
                                                  (,t-class (:foreground ,t-green))))
     `(term-color-magenta                        ((,class (:foreground ,violet))
                                                  (,t-class (:foreground ,t-violet))))
     `(term-color-red                            ((,class (:foreground ,red))
                                                  (,t-class (:foreground ,t-red))))
     `(term-color-white                          ((,class (:foreground ,base))
                                                  (,t-class (:foreground ,t-base3))))
     `(term-color-yellow                         ((,class (:foreground ,yellow))
                                                  (,t-class (:foreground ,t-yellow))))

;;;;; undo-tree
     `(undo-tree-visualizer-current-face        ((,class :foreground ,builtin)
                                                 (,t-class :foreground ,t-builtin)))
     `(undo-tree-visualizer-default-face        ((,class :foreground ,base)
                                                 (,t-class :foreground ,t-base)))
     `(undo-tree-visualizer-register-face       ((,class :foreground ,comp)
                                                 (,t-class (:foreground ,t-comp))))
     `(undo-tree-visualizer-unmodified-face     ((,class :foreground ,var)
                                                 (,t-class :foreground ,t-var)))

;;;;; which-key
     `(which-key-command-description-face        ((,class (:foreground ,base))
                                                  (,t-class (:foreground ,t-base))))
     `(which-key-group-description-face          ((,class (:foreground ,key2))
                                                  (,t-class (:foreground ,t-key2))))
     `(which-key-key-face                        ((,class (:foreground ,func :bold t))
                                                  (,t-class (:foreground ,t-func :bold t))))
     `(which-key-separator-face                  ((,class (:background nil :foreground ,str))
                                                  (,t-class (:background nil :foreground ,t-str))))
     `(which-key-special-key-face                ((,class (:background ,func :foreground ,bg1))
                                                  (,t-class (:background ,t-func :foreground ,t-bg1))))

;;;;; auto-complete
     `(ac-candidate-face                         ((,class (:background ,bg2 :foreground ,base))
                                                  (,t-class (:background ,t-bg2 :foreground ,t-base))))
     `(ac-selection-face                         ((,class (:background ,type :foreground ,base))
                                                  (,t-class (:background ,t-type :foreground ,t-base))))
     `(popup-tip-face                            ((,class (:background ,red :foreground ,base))
                                                  (,t-class (:background ,t-red :foreground ,t-base))))
     `(popup-scroll-bar-foreground-face          ((,class (:background ,type))
                                                  (,t-class (:background ,t-type))))
     `(popup-scroll-bar-background-face          ((,class (:background ,bg2))
                                                  (,t-class (:background ,t-bg2))))
     `(popup-isearch-match                       ((,class (:background ,bg2 :foreground ,bg1 :bold t))
                                                  (,t-class (:background ,t-bg2 :foreground ,t-bg1 :bold t))))
     `(ac-completion-face                        ((,class (:underline t :foreground ,keyword))
                                                  (,t-class (:underline t :foreground ,t-keyword))))

;;;;; Weechat
     `(weechat-color-list
       `(unspecified ,bg1 ,bg3
                     ,red ,err
                     ,green ,func
                     ,yellow ,war
                     ,inf ,type
                     ,violet ,bg4
                     ,cyan ,builtin
                     ,base3 ,base
                     ))

;;;;; whitespace-mode
     `(trailing-whitespace                      ((,class :foreground nil :background ,err)
                                                 (,t-class :foreground nil :background ,t-err)))
     `(whitespace-empty                         ((,class (:background nil :foreground ,yellow))
                                                 (,t-class (:background nil :foreground ,t-yellow))))
     `(whitespace-indentation                   ((,class (:background nil :foreground ,war))
                                                 (,t-class (:background nil :foregrount ,t-war))))
     `(whitespace-line                          ((,class (:background nil :foreground ,comp))
                                                 (,t-class (:background nil :foreground ,t-comp))))
     `(whitespace-newline                       ((,class (:background nil :foreground ,comp))
                                                 (,t-class (:background nil :foreground ,t-comp))))
     `(whitespace-space                         ((,class (:background nil :foreground ,base2))
                                                 (,t-class (:background nil :foreground ,t-base2))))
     `(whitespace-space-after-tab               ((,class (:background nil :foreground ,yellow))
                                                 (,t-class (:background nil :foreground ,t-yellow))))
     `(whitespace-space-before-tab              ((,class (:background nil :foreground ,yellow))
                                                 (,t-class (:background nil :foreground ,t-const))))
     `(whitespace-tab                           ((,class (:background nil))
                                                 (,t-class (:background nil))))
     `(whitespace-trailing                      ((,class (:background ,err :foreground ,base))
                                                 (,t-class (:background ,t-err :foreground ,base))))


;;;;; misc others
     `(ffap                                     ((,class (:foreground ,base))
                                                 (,t-class (:foreground ,t-base))))
     `(icompletep-determined                    ((,class :foreground ,builtin)
                                                 (,t-class :foreground ,t-builtin)))
     `(mu4e-cited-1-face                        ((,class (:foreground ,base))
                                                 (,t-class (:foreground ,t-base))))
     `(mu4e-cited-7-face                        ((,class (:foreground ,base))
                                                 (,t-class (:foreground ,t-base))))
     `(mu4e-header-marks-face                   ((,class (:foreground ,comp))
                                                 (,t-class (:foreground ,t-comp))))
     `(mu4e-view-url-number-face                ((,class (:foreground ,comp))
                                                 (,t-class (:foreground ,t-comp))))
     `(slime-repl-inputed-output-face           ((,class (:foreground ,comp))
                                                 (,t-class (:foreground ,t-comp))))
;;;;; web-mode
     `(web-mode-builtin-face                    ((,class (:inherit ,font-lock-builtin-face))
                                                 (,t-class (:inherit ,font-lock-builtin-face))))
     `(web-mode-comment-face                    ((,class (:inherit ,font-lock-comment-face))
                                                 (,t-class (:inherit ,font-lock-comment-face))))
     `(web-mode-constant-face                   ((,class (:inherit ,font-lock-constant-face))
                                                 (,t-class (:inherit ,font-lock-constant-face))))
     `(web-mode-doctype-face                    ((,class (:inherit ,font-lock-comment-face))
                                                 (,t-class (:inherit ,font-lock-comment-face))))
     `(web-mode-function-name-face              ((,class (:inherit ,font-lock-function-name-face))
                                                 (,t-class (:inherit ,font-lock-function-name-face))))
     `(web-mode-html-attr-name-face             ((,class (:foreground ,type))
                                                 (,t-class (:foreground ,t-func))))
     `(web-mode-html-attr-value-face            ((,class (:foreground ,keyword))
                                                 (,t-class (:foreground ,t-keyword))))
     `(web-mode-html-tag-face                   ((,class (:foreground ,builtin))
                                                 (,t-class (:foreground ,t-builtin))))
     `(web-mode-keyword-face                    ((,class (:foreground ,keyword))
                                                 (,t-class (:foreground ,t-keyword))))
     `(web-mode-string-face                     ((,class (:foreground ,str))
                                                 (,t-class (:foreground ,t-str))))
     `(web-mode-type-face                       ((,class (:inherit ,font-lock-type-face))
                                                 (,t-class (:inherit ,font-lock-type-face))))
     `(web-mode-warning-face                    ((,class (:inherit ,font-lock-warning-face))
                                                 (,t-class (:inherit ,font-lock-warning-face)))))

    (custom-theme-set-variables
     theme-name

  ;;;;; ansi-colors
     `(ansi-color-names-vector
       [,bg2 ,key1 ,func ,yellow ,type ,violet ,cyan ,base])

  ;;;;; xterm-colors
     `(xterm-color-names [,bg2 ,key1 ,func ,const ,type ,violet ,cyan ,base])
     `(xterm-color-names-bright [,bg3 ,comp ,yellow ,inf ,interop ,builtin ,base])

  ;;;;; pos-tip
     `(pos-tip-background-color ,bg2)
     )
    ))

;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide 'majapahit-common)

;; Local Variables:
;; no-byte-compile: t
;; End:

;;; majapahit-common.el ends here
